Synchronized events vs async

Callbacks = one function executed right after another.

Promises = running functions in the background, not running in order.

Hoisting = before exeucting the file. 

Examples of Asynch Code
1. Set intervals (ie- 'run after 5 seconds')
2. Set timeout
3. event listeners
    These ^ are function calls that return Promises

Set Intervals create Promises -- which is how we create Async code

Use async in order to let everything download in a timely fashion.

The set interval does not block the rest of the program executing - it's not dependent on anything else, therefore it can run in the background.

Async is good because you don't want the entire program waiting for you to click on a button in order to load. (event listener)



A promise is a construcr we use to handle async code.

A promise constructor uses functions as its TWO parameters.
    Resolve
    Reject

What the promise is trying to do -- is something that will take time. 
It has to decide the state of the process:

1. Resolved - actions succeded
2. Rejected - actions failed
3. Pending - not finished 
4. Settled - fulfilled or rejected.

Good at handling errors


